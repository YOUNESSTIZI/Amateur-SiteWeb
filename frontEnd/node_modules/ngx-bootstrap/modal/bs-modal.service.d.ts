import { ComponentRef, TemplateRef, EventEmitter, RendererFactory2 } from '@angular/core';
import { ComponentLoaderFactory } from 'ngx-bootstrap/component-loader';
import { ModalBackdropComponent } from './modal-backdrop.component';
import { ModalOptions } from './modal-options.class';
import { BsModalRef } from './bs-modal-ref.service';
import * as ɵngcc0 from '@angular/core';
export declare class BsModalService {
    private clf;
    config: ModalOptions;
    onShow: EventEmitter<any>;
    onShown: EventEmitter<any>;
    onHide: EventEmitter<any>;
    onHidden: EventEmitter<any>;
    protected isBodyOverflowing: boolean;
    protected originalBodyPadding: number;
    protected scrollbarWidth: number;
    protected backdropRef: ComponentRef<ModalBackdropComponent>;
    private _backdropLoader;
    private modalsCount;
    private lastDismissReason;
    private loaders;
    private _renderer;
    constructor(rendererFactory: RendererFactory2, clf: ComponentLoaderFactory);
    /** Shows a modal */
    show(content: string | TemplateRef<any> | any, config?: ModalOptions): BsModalRef;
    hide(level: number): void;
    _showBackdrop(): void;
    _hideBackdrop(): void;
    _showModal(content: any): BsModalRef;
    _hideModal(level: number): void;
    getModalsCount(): number;
    setDismissReason(reason: string): void;
    removeBackdrop(): void;
    /** Checks if the body is overflowing and sets scrollbar width */
    /** @internal */
    checkScrollbar(): void;
    setScrollbar(): void;
    private resetScrollbar;
    private getScrollbarWidth;
    private _createLoaders;
    private removeLoaders;
    private copyEvent;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<BsModalService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<BsModalService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnMtbW9kYWwuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJicy1tb2RhbC5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztBQUtBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9DQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudFJlZiwgVGVtcGxhdGVSZWYsIEV2ZW50RW1pdHRlciwgUmVuZGVyZXJGYWN0b3J5MiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tcG9uZW50TG9hZGVyRmFjdG9yeSB9IGZyb20gJ25neC1ib290c3RyYXAvY29tcG9uZW50LWxvYWRlcic7XG5pbXBvcnQgeyBNb2RhbEJhY2tkcm9wQ29tcG9uZW50IH0gZnJvbSAnLi9tb2RhbC1iYWNrZHJvcC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTW9kYWxPcHRpb25zIH0gZnJvbSAnLi9tb2RhbC1vcHRpb25zLmNsYXNzJztcbmltcG9ydCB7IEJzTW9kYWxSZWYgfSBmcm9tICcuL2JzLW1vZGFsLXJlZi5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEJzTW9kYWxTZXJ2aWNlIHtcbiAgICBwcml2YXRlIGNsZjtcbiAgICBjb25maWc6IE1vZGFsT3B0aW9ucztcbiAgICBvblNob3c6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uU2hvd246IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG9uSGlkZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25IaWRkZW46IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIHByb3RlY3RlZCBpc0JvZHlPdmVyZmxvd2luZzogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgb3JpZ2luYWxCb2R5UGFkZGluZzogbnVtYmVyO1xuICAgIHByb3RlY3RlZCBzY3JvbGxiYXJXaWR0aDogbnVtYmVyO1xuICAgIHByb3RlY3RlZCBiYWNrZHJvcFJlZjogQ29tcG9uZW50UmVmPE1vZGFsQmFja2Ryb3BDb21wb25lbnQ+O1xuICAgIHByaXZhdGUgX2JhY2tkcm9wTG9hZGVyO1xuICAgIHByaXZhdGUgbW9kYWxzQ291bnQ7XG4gICAgcHJpdmF0ZSBsYXN0RGlzbWlzc1JlYXNvbjtcbiAgICBwcml2YXRlIGxvYWRlcnM7XG4gICAgcHJpdmF0ZSBfcmVuZGVyZXI7XG4gICAgY29uc3RydWN0b3IocmVuZGVyZXJGYWN0b3J5OiBSZW5kZXJlckZhY3RvcnkyLCBjbGY6IENvbXBvbmVudExvYWRlckZhY3RvcnkpO1xuICAgIC8qKiBTaG93cyBhIG1vZGFsICovXG4gICAgc2hvdyhjb250ZW50OiBzdHJpbmcgfCBUZW1wbGF0ZVJlZjxhbnk+IHwgYW55LCBjb25maWc/OiBNb2RhbE9wdGlvbnMpOiBCc01vZGFsUmVmO1xuICAgIGhpZGUobGV2ZWw6IG51bWJlcik6IHZvaWQ7XG4gICAgX3Nob3dCYWNrZHJvcCgpOiB2b2lkO1xuICAgIF9oaWRlQmFja2Ryb3AoKTogdm9pZDtcbiAgICBfc2hvd01vZGFsKGNvbnRlbnQ6IGFueSk6IEJzTW9kYWxSZWY7XG4gICAgX2hpZGVNb2RhbChsZXZlbDogbnVtYmVyKTogdm9pZDtcbiAgICBnZXRNb2RhbHNDb3VudCgpOiBudW1iZXI7XG4gICAgc2V0RGlzbWlzc1JlYXNvbihyZWFzb246IHN0cmluZyk6IHZvaWQ7XG4gICAgcmVtb3ZlQmFja2Ryb3AoKTogdm9pZDtcbiAgICAvKiogQ2hlY2tzIGlmIHRoZSBib2R5IGlzIG92ZXJmbG93aW5nIGFuZCBzZXRzIHNjcm9sbGJhciB3aWR0aCAqL1xuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBjaGVja1Njcm9sbGJhcigpOiB2b2lkO1xuICAgIHNldFNjcm9sbGJhcigpOiB2b2lkO1xuICAgIHByaXZhdGUgcmVzZXRTY3JvbGxiYXI7XG4gICAgcHJpdmF0ZSBnZXRTY3JvbGxiYXJXaWR0aDtcbiAgICBwcml2YXRlIF9jcmVhdGVMb2FkZXJzO1xuICAgIHByaXZhdGUgcmVtb3ZlTG9hZGVycztcbiAgICBwcml2YXRlIGNvcHlFdmVudDtcbn1cbiJdfQ==
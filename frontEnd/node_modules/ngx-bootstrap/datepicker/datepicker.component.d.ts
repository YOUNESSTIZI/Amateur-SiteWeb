import { EventEmitter, Provider } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { DatePickerInnerComponent } from './datepicker-inner.component';
import { DatepickerConfig } from './datepicker.config';
import * as ɵngcc0 from '@angular/core';
export declare const DATEPICKER_CONTROL_VALUE_ACCESSOR: Provider;
export declare class DatePickerComponent implements ControlValueAccessor {
    /** sets datepicker mode, supports: `day`, `month`, `year` */
    datepickerMode: string;
    /** default date to show if `ng-model` value is not specified */
    initDate: Date;
    /**  oldest selectable date */
    minDate: Date;
    /** latest selectable date */
    maxDate: Date;
    /** set lower datepicker mode, supports: `day`, `month`, `year` */
    minMode: string;
    /** sets upper datepicker mode, supports: `day`, `month`, `year` */
    maxMode: string;
    /** if false week numbers will be hidden */
    showWeeks: boolean;
    /** format of day in month */
    formatDay: string;
    /** format of month in year */
    formatMonth: string;
    /** format of year in year range */
    formatYear: string;
    /** format of day in week header */
    formatDayHeader: string;
    /** format of title when selecting day */
    formatDayTitle: string;
    /** format of title when selecting month */
    formatMonthTitle: string;
    /** starting day of the week from 0-6 (0=Sunday, ..., 6=Saturday) */
    startingDay: number;
    /** number of years displayed in year selection */
    yearRange: number;
    /** if true only dates from the currently displayed month will be shown */
    onlyCurrentMonth: boolean;
    /** if true shortcut`s event propagation will be disabled */
    shortcutPropagation: boolean;
    /** number of months displayed in a single row of month picker */
    monthColLimit: number;
    /** number of years displayed in a single row of year picker */
    yearColLimit: number;
    /** array of custom css classes to be applied to targeted dates */
    customClass: {
        date: Date;
        mode: string;
        clazz: string;
    }[];
    /** array of disabled dates */
    dateDisabled: {
        date: Date;
        mode: string;
    }[];
    /** disabled days of the week from 0-6 (0=Sunday, ..., 6=Saturday) */
    dayDisabled: number[];
    /** currently active date */
    activeDate: Date;
    selectionDone: EventEmitter<Date>;
    /** callback to invoke when the activeDate is changed. */
    activeDateChange: EventEmitter<Date>;
    _datePicker: DatePickerInnerComponent;
    onChange: any;
    onTouched: any;
    config: DatepickerConfig;
    protected _now: Date;
    protected _activeDate: Date;
    constructor(config: DatepickerConfig);
    configureOptions(): void;
    onUpdate(event: Date): void;
    onSelectionDone(event: Date): void;
    onActiveDateChange(event: Date): void;
    writeValue(value: any): void;
    registerOnChange(fn: () => void): void;
    registerOnTouched(fn: () => void): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DatePickerComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DatePickerComponent, "datepicker", never, {
    "datepickerMode": "datepickerMode";
    "showWeeks": "showWeeks";
    "activeDate": "activeDate";
    "initDate": "initDate";
    "minDate": "minDate";
    "maxDate": "maxDate";
    "minMode": "minMode";
    "maxMode": "maxMode";
    "formatDay": "formatDay";
    "formatMonth": "formatMonth";
    "formatYear": "formatYear";
    "formatDayHeader": "formatDayHeader";
    "formatDayTitle": "formatDayTitle";
    "formatMonthTitle": "formatMonthTitle";
    "startingDay": "startingDay";
    "yearRange": "yearRange";
    "onlyCurrentMonth": "onlyCurrentMonth";
    "shortcutPropagation": "shortcutPropagation";
    "monthColLimit": "monthColLimit";
    "yearColLimit": "yearColLimit";
    "customClass": "customClass";
    "dateDisabled": "dateDisabled";
    "dayDisabled": "dayDisabled";
}, {
    "selectionDone": "selectionDone";
    "activeDateChange": "activeDateChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZGF0ZXBpY2tlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3RUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIFByb3ZpZGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IERhdGVQaWNrZXJJbm5lckNvbXBvbmVudCB9IGZyb20gJy4vZGF0ZXBpY2tlci1pbm5lci5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGF0ZXBpY2tlckNvbmZpZyB9IGZyb20gJy4vZGF0ZXBpY2tlci5jb25maWcnO1xuZXhwb3J0IGRlY2xhcmUgY29uc3QgREFURVBJQ0tFUl9DT05UUk9MX1ZBTFVFX0FDQ0VTU09SOiBQcm92aWRlcjtcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERhdGVQaWNrZXJDb21wb25lbnQgaW1wbGVtZW50cyBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG4gICAgLyoqIHNldHMgZGF0ZXBpY2tlciBtb2RlLCBzdXBwb3J0czogYGRheWAsIGBtb250aGAsIGB5ZWFyYCAqL1xuICAgIGRhdGVwaWNrZXJNb2RlOiBzdHJpbmc7XG4gICAgLyoqIGRlZmF1bHQgZGF0ZSB0byBzaG93IGlmIGBuZy1tb2RlbGAgdmFsdWUgaXMgbm90IHNwZWNpZmllZCAqL1xuICAgIGluaXREYXRlOiBEYXRlO1xuICAgIC8qKiAgb2xkZXN0IHNlbGVjdGFibGUgZGF0ZSAqL1xuICAgIG1pbkRhdGU6IERhdGU7XG4gICAgLyoqIGxhdGVzdCBzZWxlY3RhYmxlIGRhdGUgKi9cbiAgICBtYXhEYXRlOiBEYXRlO1xuICAgIC8qKiBzZXQgbG93ZXIgZGF0ZXBpY2tlciBtb2RlLCBzdXBwb3J0czogYGRheWAsIGBtb250aGAsIGB5ZWFyYCAqL1xuICAgIG1pbk1vZGU6IHN0cmluZztcbiAgICAvKiogc2V0cyB1cHBlciBkYXRlcGlja2VyIG1vZGUsIHN1cHBvcnRzOiBgZGF5YCwgYG1vbnRoYCwgYHllYXJgICovXG4gICAgbWF4TW9kZTogc3RyaW5nO1xuICAgIC8qKiBpZiBmYWxzZSB3ZWVrIG51bWJlcnMgd2lsbCBiZSBoaWRkZW4gKi9cbiAgICBzaG93V2Vla3M6IGJvb2xlYW47XG4gICAgLyoqIGZvcm1hdCBvZiBkYXkgaW4gbW9udGggKi9cbiAgICBmb3JtYXREYXk6IHN0cmluZztcbiAgICAvKiogZm9ybWF0IG9mIG1vbnRoIGluIHllYXIgKi9cbiAgICBmb3JtYXRNb250aDogc3RyaW5nO1xuICAgIC8qKiBmb3JtYXQgb2YgeWVhciBpbiB5ZWFyIHJhbmdlICovXG4gICAgZm9ybWF0WWVhcjogc3RyaW5nO1xuICAgIC8qKiBmb3JtYXQgb2YgZGF5IGluIHdlZWsgaGVhZGVyICovXG4gICAgZm9ybWF0RGF5SGVhZGVyOiBzdHJpbmc7XG4gICAgLyoqIGZvcm1hdCBvZiB0aXRsZSB3aGVuIHNlbGVjdGluZyBkYXkgKi9cbiAgICBmb3JtYXREYXlUaXRsZTogc3RyaW5nO1xuICAgIC8qKiBmb3JtYXQgb2YgdGl0bGUgd2hlbiBzZWxlY3RpbmcgbW9udGggKi9cbiAgICBmb3JtYXRNb250aFRpdGxlOiBzdHJpbmc7XG4gICAgLyoqIHN0YXJ0aW5nIGRheSBvZiB0aGUgd2VlayBmcm9tIDAtNiAoMD1TdW5kYXksIC4uLiwgNj1TYXR1cmRheSkgKi9cbiAgICBzdGFydGluZ0RheTogbnVtYmVyO1xuICAgIC8qKiBudW1iZXIgb2YgeWVhcnMgZGlzcGxheWVkIGluIHllYXIgc2VsZWN0aW9uICovXG4gICAgeWVhclJhbmdlOiBudW1iZXI7XG4gICAgLyoqIGlmIHRydWUgb25seSBkYXRlcyBmcm9tIHRoZSBjdXJyZW50bHkgZGlzcGxheWVkIG1vbnRoIHdpbGwgYmUgc2hvd24gKi9cbiAgICBvbmx5Q3VycmVudE1vbnRoOiBib29sZWFuO1xuICAgIC8qKiBpZiB0cnVlIHNob3J0Y3V0YHMgZXZlbnQgcHJvcGFnYXRpb24gd2lsbCBiZSBkaXNhYmxlZCAqL1xuICAgIHNob3J0Y3V0UHJvcGFnYXRpb246IGJvb2xlYW47XG4gICAgLyoqIG51bWJlciBvZiBtb250aHMgZGlzcGxheWVkIGluIGEgc2luZ2xlIHJvdyBvZiBtb250aCBwaWNrZXIgKi9cbiAgICBtb250aENvbExpbWl0OiBudW1iZXI7XG4gICAgLyoqIG51bWJlciBvZiB5ZWFycyBkaXNwbGF5ZWQgaW4gYSBzaW5nbGUgcm93IG9mIHllYXIgcGlja2VyICovXG4gICAgeWVhckNvbExpbWl0OiBudW1iZXI7XG4gICAgLyoqIGFycmF5IG9mIGN1c3RvbSBjc3MgY2xhc3NlcyB0byBiZSBhcHBsaWVkIHRvIHRhcmdldGVkIGRhdGVzICovXG4gICAgY3VzdG9tQ2xhc3M6IHtcbiAgICAgICAgZGF0ZTogRGF0ZTtcbiAgICAgICAgbW9kZTogc3RyaW5nO1xuICAgICAgICBjbGF6ejogc3RyaW5nO1xuICAgIH1bXTtcbiAgICAvKiogYXJyYXkgb2YgZGlzYWJsZWQgZGF0ZXMgKi9cbiAgICBkYXRlRGlzYWJsZWQ6IHtcbiAgICAgICAgZGF0ZTogRGF0ZTtcbiAgICAgICAgbW9kZTogc3RyaW5nO1xuICAgIH1bXTtcbiAgICAvKiogZGlzYWJsZWQgZGF5cyBvZiB0aGUgd2VlayBmcm9tIDAtNiAoMD1TdW5kYXksIC4uLiwgNj1TYXR1cmRheSkgKi9cbiAgICBkYXlEaXNhYmxlZDogbnVtYmVyW107XG4gICAgLyoqIGN1cnJlbnRseSBhY3RpdmUgZGF0ZSAqL1xuICAgIGFjdGl2ZURhdGU6IERhdGU7XG4gICAgc2VsZWN0aW9uRG9uZTogRXZlbnRFbWl0dGVyPERhdGU+O1xuICAgIC8qKiBjYWxsYmFjayB0byBpbnZva2Ugd2hlbiB0aGUgYWN0aXZlRGF0ZSBpcyBjaGFuZ2VkLiAqL1xuICAgIGFjdGl2ZURhdGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxEYXRlPjtcbiAgICBfZGF0ZVBpY2tlcjogRGF0ZVBpY2tlcklubmVyQ29tcG9uZW50O1xuICAgIG9uQ2hhbmdlOiBhbnk7XG4gICAgb25Ub3VjaGVkOiBhbnk7XG4gICAgY29uZmlnOiBEYXRlcGlja2VyQ29uZmlnO1xuICAgIHByb3RlY3RlZCBfbm93OiBEYXRlO1xuICAgIHByb3RlY3RlZCBfYWN0aXZlRGF0ZTogRGF0ZTtcbiAgICBjb25zdHJ1Y3Rvcihjb25maWc6IERhdGVwaWNrZXJDb25maWcpO1xuICAgIGNvbmZpZ3VyZU9wdGlvbnMoKTogdm9pZDtcbiAgICBvblVwZGF0ZShldmVudDogRGF0ZSk6IHZvaWQ7XG4gICAgb25TZWxlY3Rpb25Eb25lKGV2ZW50OiBEYXRlKTogdm9pZDtcbiAgICBvbkFjdGl2ZURhdGVDaGFuZ2UoZXZlbnQ6IERhdGUpOiB2b2lkO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogKCkgPT4gdm9pZCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46ICgpID0+IHZvaWQpOiB2b2lkO1xufVxuIl19
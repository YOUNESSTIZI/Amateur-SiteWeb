import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { DateFormatter } from './date-formatter';
import * as ɵngcc0 from '@angular/core';
export declare class DatePickerInnerComponent implements OnInit, OnChanges {
    locale: string;
    datepickerMode: string;
    startingDay: number;
    yearRange: number;
    minDate: Date;
    maxDate: Date;
    minMode: string;
    maxMode: string;
    showWeeks: boolean;
    formatDay: string;
    formatMonth: string;
    formatYear: string;
    formatDayHeader: string;
    formatDayTitle: string;
    formatMonthTitle: string;
    onlyCurrentMonth: boolean;
    shortcutPropagation: boolean;
    customClass: {
        date: Date;
        mode: string;
        clazz: string;
    }[];
    monthColLimit: number;
    yearColLimit: number;
    dateDisabled: {
        date: Date;
        mode: string;
    }[];
    dayDisabled: number[];
    initDate: Date;
    selectionDone: EventEmitter<Date>;
    update: EventEmitter<Date>;
    activeDateChange: EventEmitter<Date>;
    stepDay: any;
    stepMonth: any;
    stepYear: any;
    uniqueId: string;
    protected modes: string[];
    protected dateFormatter: DateFormatter;
    protected _activeDate: Date;
    protected selectedDate: Date;
    protected activeDateId: string;
    protected refreshViewHandlerDay: Function;
    protected compareHandlerDay: Function;
    protected refreshViewHandlerMonth: Function;
    protected compareHandlerMonth: Function;
    protected refreshViewHandlerYear: Function;
    protected compareHandlerYear: Function;
    activeDate: Date;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    checkIfActiveDateGotUpdated(activeDate: any): void;
    setCompareHandler(handler: Function, type: string): void;
    compare(date1: Date, date2: Date): number | undefined;
    setRefreshViewHandler(handler: Function, type: string): void;
    refreshView(): void;
    dateFilter(date: Date, format: string): string;
    isActive(dateObject: any): boolean;
    createDateObject(date: Date, format: string): any;
    split(arr: any[], size: number): any[];
    fixTimeZone(date: Date): Date;
    select(date: Date, isManual?: boolean): void;
    move(direction: number): void;
    toggleMode(_direction: number): void;
    protected getCustomClassForDate(date: Date): string;
    protected compareDateDisabled(date1Disabled: {
        date: Date;
        mode: string;
    }, date2: Date): number;
    protected isDisabled(date: Date): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DatePickerInnerComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DatePickerInnerComponent, "datepicker-inner", never, {
    "activeDate": "activeDate";
    "datepickerMode": "datepickerMode";
    "locale": "locale";
    "startingDay": "startingDay";
    "yearRange": "yearRange";
    "minDate": "minDate";
    "maxDate": "maxDate";
    "minMode": "minMode";
    "maxMode": "maxMode";
    "showWeeks": "showWeeks";
    "formatDay": "formatDay";
    "formatMonth": "formatMonth";
    "formatYear": "formatYear";
    "formatDayHeader": "formatDayHeader";
    "formatDayTitle": "formatDayTitle";
    "formatMonthTitle": "formatMonthTitle";
    "onlyCurrentMonth": "onlyCurrentMonth";
    "shortcutPropagation": "shortcutPropagation";
    "customClass": "customClass";
    "monthColLimit": "monthColLimit";
    "yearColLimit": "yearColLimit";
    "dateDisabled": "dateDisabled";
    "dayDisabled": "dayDisabled";
    "initDate": "initDate";
}, {
    "selectionDone": "selectionDone";
    "update": "update";
    "activeDateChange": "activeDateChange";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci1pbm5lci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiZGF0ZXBpY2tlci1pbm5lci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVFQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkluaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhdGVGb3JtYXR0ZXIgfSBmcm9tICcuL2RhdGUtZm9ybWF0dGVyJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERhdGVQaWNrZXJJbm5lckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgICBsb2NhbGU6IHN0cmluZztcbiAgICBkYXRlcGlja2VyTW9kZTogc3RyaW5nO1xuICAgIHN0YXJ0aW5nRGF5OiBudW1iZXI7XG4gICAgeWVhclJhbmdlOiBudW1iZXI7XG4gICAgbWluRGF0ZTogRGF0ZTtcbiAgICBtYXhEYXRlOiBEYXRlO1xuICAgIG1pbk1vZGU6IHN0cmluZztcbiAgICBtYXhNb2RlOiBzdHJpbmc7XG4gICAgc2hvd1dlZWtzOiBib29sZWFuO1xuICAgIGZvcm1hdERheTogc3RyaW5nO1xuICAgIGZvcm1hdE1vbnRoOiBzdHJpbmc7XG4gICAgZm9ybWF0WWVhcjogc3RyaW5nO1xuICAgIGZvcm1hdERheUhlYWRlcjogc3RyaW5nO1xuICAgIGZvcm1hdERheVRpdGxlOiBzdHJpbmc7XG4gICAgZm9ybWF0TW9udGhUaXRsZTogc3RyaW5nO1xuICAgIG9ubHlDdXJyZW50TW9udGg6IGJvb2xlYW47XG4gICAgc2hvcnRjdXRQcm9wYWdhdGlvbjogYm9vbGVhbjtcbiAgICBjdXN0b21DbGFzczoge1xuICAgICAgICBkYXRlOiBEYXRlO1xuICAgICAgICBtb2RlOiBzdHJpbmc7XG4gICAgICAgIGNsYXp6OiBzdHJpbmc7XG4gICAgfVtdO1xuICAgIG1vbnRoQ29sTGltaXQ6IG51bWJlcjtcbiAgICB5ZWFyQ29sTGltaXQ6IG51bWJlcjtcbiAgICBkYXRlRGlzYWJsZWQ6IHtcbiAgICAgICAgZGF0ZTogRGF0ZTtcbiAgICAgICAgbW9kZTogc3RyaW5nO1xuICAgIH1bXTtcbiAgICBkYXlEaXNhYmxlZDogbnVtYmVyW107XG4gICAgaW5pdERhdGU6IERhdGU7XG4gICAgc2VsZWN0aW9uRG9uZTogRXZlbnRFbWl0dGVyPERhdGU+O1xuICAgIHVwZGF0ZTogRXZlbnRFbWl0dGVyPERhdGU+O1xuICAgIGFjdGl2ZURhdGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxEYXRlPjtcbiAgICBzdGVwRGF5OiBhbnk7XG4gICAgc3RlcE1vbnRoOiBhbnk7XG4gICAgc3RlcFllYXI6IGFueTtcbiAgICB1bmlxdWVJZDogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBtb2Rlczogc3RyaW5nW107XG4gICAgcHJvdGVjdGVkIGRhdGVGb3JtYXR0ZXI6IERhdGVGb3JtYXR0ZXI7XG4gICAgcHJvdGVjdGVkIF9hY3RpdmVEYXRlOiBEYXRlO1xuICAgIHByb3RlY3RlZCBzZWxlY3RlZERhdGU6IERhdGU7XG4gICAgcHJvdGVjdGVkIGFjdGl2ZURhdGVJZDogc3RyaW5nO1xuICAgIHByb3RlY3RlZCByZWZyZXNoVmlld0hhbmRsZXJEYXk6IEZ1bmN0aW9uO1xuICAgIHByb3RlY3RlZCBjb21wYXJlSGFuZGxlckRheTogRnVuY3Rpb247XG4gICAgcHJvdGVjdGVkIHJlZnJlc2hWaWV3SGFuZGxlck1vbnRoOiBGdW5jdGlvbjtcbiAgICBwcm90ZWN0ZWQgY29tcGFyZUhhbmRsZXJNb250aDogRnVuY3Rpb247XG4gICAgcHJvdGVjdGVkIHJlZnJlc2hWaWV3SGFuZGxlclllYXI6IEZ1bmN0aW9uO1xuICAgIHByb3RlY3RlZCBjb21wYXJlSGFuZGxlclllYXI6IEZ1bmN0aW9uO1xuICAgIGFjdGl2ZURhdGU6IERhdGU7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBjaGVja0lmQWN0aXZlRGF0ZUdvdFVwZGF0ZWQoYWN0aXZlRGF0ZTogYW55KTogdm9pZDtcbiAgICBzZXRDb21wYXJlSGFuZGxlcihoYW5kbGVyOiBGdW5jdGlvbiwgdHlwZTogc3RyaW5nKTogdm9pZDtcbiAgICBjb21wYXJlKGRhdGUxOiBEYXRlLCBkYXRlMjogRGF0ZSk6IG51bWJlciB8IHVuZGVmaW5lZDtcbiAgICBzZXRSZWZyZXNoVmlld0hhbmRsZXIoaGFuZGxlcjogRnVuY3Rpb24sIHR5cGU6IHN0cmluZyk6IHZvaWQ7XG4gICAgcmVmcmVzaFZpZXcoKTogdm9pZDtcbiAgICBkYXRlRmlsdGVyKGRhdGU6IERhdGUsIGZvcm1hdDogc3RyaW5nKTogc3RyaW5nO1xuICAgIGlzQWN0aXZlKGRhdGVPYmplY3Q6IGFueSk6IGJvb2xlYW47XG4gICAgY3JlYXRlRGF0ZU9iamVjdChkYXRlOiBEYXRlLCBmb3JtYXQ6IHN0cmluZyk6IGFueTtcbiAgICBzcGxpdChhcnI6IGFueVtdLCBzaXplOiBudW1iZXIpOiBhbnlbXTtcbiAgICBmaXhUaW1lWm9uZShkYXRlOiBEYXRlKTogRGF0ZTtcbiAgICBzZWxlY3QoZGF0ZTogRGF0ZSwgaXNNYW51YWw/OiBib29sZWFuKTogdm9pZDtcbiAgICBtb3ZlKGRpcmVjdGlvbjogbnVtYmVyKTogdm9pZDtcbiAgICB0b2dnbGVNb2RlKF9kaXJlY3Rpb246IG51bWJlcik6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIGdldEN1c3RvbUNsYXNzRm9yRGF0ZShkYXRlOiBEYXRlKTogc3RyaW5nO1xuICAgIHByb3RlY3RlZCBjb21wYXJlRGF0ZURpc2FibGVkKGRhdGUxRGlzYWJsZWQ6IHtcbiAgICAgICAgZGF0ZTogRGF0ZTtcbiAgICAgICAgbW9kZTogc3RyaW5nO1xuICAgIH0sIGRhdGUyOiBEYXRlKTogbnVtYmVyO1xuICAgIHByb3RlY3RlZCBpc0Rpc2FibGVkKGRhdGU6IERhdGUpOiBib29sZWFuO1xufVxuIl19
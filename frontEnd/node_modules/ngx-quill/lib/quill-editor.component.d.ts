import { DomSanitizer } from '@angular/platform-browser';
import { QuillModules, CustomOption, CustomModule } from './quill-editor.interfaces';
import QuillType, { Delta } from 'quill';
import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, Renderer2, SimpleChanges } from '@angular/core';
import { ControlValueAccessor, Validator } from '@angular/forms';
import { QuillService } from './quill.service';
import * as ɵngcc0 from '@angular/core';
export interface Range {
    index: number;
    length: number;
}
export interface ContentChange {
    content: any;
    delta: Delta;
    editor: QuillType;
    html: string | null;
    oldDelta: Delta;
    source: string;
    text: string;
}
export interface SelectionChange {
    editor: QuillType;
    oldRange: Range | null;
    range: Range | null;
    source: string;
}
export interface Blur {
    editor: QuillType;
    source: string;
}
export interface Focus {
    editor: QuillType;
    source: string;
}
export declare type EditorChangeContent = ContentChange & {
    event: 'text-change';
};
export declare type EditorChangeSelection = SelectionChange & {
    event: 'selection-change';
};
export declare abstract class QuillEditorBase implements AfterViewInit, ControlValueAccessor, OnChanges, OnDestroy, Validator {
    elementRef: ElementRef;
    protected domSanitizer: DomSanitizer;
    protected doc: any;
    protected platformId: any;
    protected renderer: Renderer2;
    protected zone: NgZone;
    protected service: QuillService;
    quillEditor: QuillType;
    editorElem: HTMLElement;
    content: any;
    format?: 'object' | 'html' | 'text' | 'json';
    theme?: string;
    modules?: QuillModules;
    debug?: 'warn' | 'log' | 'error' | false;
    readOnly?: boolean;
    placeholder?: string;
    maxLength?: number;
    minLength?: number;
    required: boolean;
    formats?: string[] | null;
    customToolbarPosition: 'top' | 'bottom';
    sanitize: boolean;
    styles: any;
    strict: boolean;
    scrollingContainer?: HTMLElement | string | null;
    bounds?: HTMLElement | string;
    customOptions: CustomOption[];
    customModules: CustomModule[];
    trackChanges?: 'user' | 'all';
    preserveWhitespace: boolean;
    classes?: string;
    trimOnValidation: boolean;
    onEditorCreated: EventEmitter<any>;
    onEditorChanged: EventEmitter<EditorChangeContent | EditorChangeSelection>;
    onContentChanged: EventEmitter<ContentChange>;
    onSelectionChanged: EventEmitter<SelectionChange>;
    onFocus: EventEmitter<Focus>;
    onBlur: EventEmitter<Blur>;
    disabled: boolean;
    onModelChange: (modelValue?: any) => void;
    onModelTouched: () => void;
    onValidatorChanged: () => void;
    constructor(elementRef: ElementRef, domSanitizer: DomSanitizer, doc: any, platformId: any, renderer: Renderer2, zone: NgZone, service: QuillService);
    static normalizeClassNames(classes: string): string[];
    valueGetter: (quillEditor: QuillType, editorElement: HTMLElement) => any;
    valueSetter: (quillEditor: QuillType, value: any) => any;
    ngAfterViewInit(): Promise<void>;
    selectionChangeHandler: (range: Range, oldRange: Range, source: string) => void;
    textChangeHandler: (delta: Delta, oldDelta: Delta, source: string) => void;
    editorChangeHandler: (event: "text-change" | "selection-change", current: any, old: any, source: string) => void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    addClasses(classList: string): void;
    removeClasses(classList: string): void;
    writeValue(currentValue: any): void;
    setDisabledState(isDisabled?: boolean): void;
    registerOnChange(fn: (modelValue: any) => void): void;
    registerOnTouched(fn: () => void): void;
    registerOnValidatorChange(fn: () => void): void;
    validate(): {
        minLengthError?: {
            given: number;
            minLength: number;
        };
        maxLengthError?: {
            given: number;
            maxLength: number;
        };
        requiredError?: {
            empty: boolean;
        };
    };
    static ɵfac: ɵngcc0.ɵɵFactoryDef<QuillEditorBase>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<QuillEditorBase, never, never, {
    "required": "required";
    "customToolbarPosition": "customToolbarPosition";
    "sanitize": "sanitize";
    "styles": "styles";
    "strict": "strict";
    "customOptions": "customOptions";
    "customModules": "customModules";
    "preserveWhitespace": "preserveWhitespace";
    "trimOnValidation": "trimOnValidation";
    "valueGetter": "valueGetter";
    "valueSetter": "valueSetter";
    "format": "format";
    "theme": "theme";
    "modules": "modules";
    "debug": "debug";
    "readOnly": "readOnly";
    "placeholder": "placeholder";
    "maxLength": "maxLength";
    "minLength": "minLength";
    "formats": "formats";
    "scrollingContainer": "scrollingContainer";
    "bounds": "bounds";
    "trackChanges": "trackChanges";
    "classes": "classes";
}, {
    "onEditorCreated": "onEditorCreated";
    "onEditorChanged": "onEditorChanged";
    "onContentChanged": "onContentChanged";
    "onSelectionChanged": "onSelectionChanged";
    "onFocus": "onFocus";
    "onBlur": "onBlur";
}, never>;
}
export declare class QuillEditorComponent extends QuillEditorBase {
    constructor(elementRef: ElementRef, domSanitizer: DomSanitizer, doc: any, platformId: any, renderer: Renderer2, zone: NgZone, service: QuillService);
    static ɵfac: ɵngcc0.ɵɵFactoryDef<QuillEditorComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<QuillEditorComponent, "quill-editor", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpbGwtZWRpdG9yLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJxdWlsbC1lZGl0b3IuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFNQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEwR0E7Ozs7O0FBR0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IFF1aWxsTW9kdWxlcywgQ3VzdG9tT3B0aW9uLCBDdXN0b21Nb2R1bGUgfSBmcm9tICcuL3F1aWxsLWVkaXRvci5pbnRlcmZhY2VzJztcbmltcG9ydCBRdWlsbFR5cGUsIHsgRGVsdGEgfSBmcm9tICdxdWlsbCc7XG5pbXBvcnQgeyBBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE5nWm9uZSwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIFJlbmRlcmVyMiwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIFZhbGlkYXRvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFF1aWxsU2VydmljZSB9IGZyb20gJy4vcXVpbGwuc2VydmljZSc7XG5leHBvcnQgaW50ZXJmYWNlIFJhbmdlIHtcbiAgICBpbmRleDogbnVtYmVyO1xuICAgIGxlbmd0aDogbnVtYmVyO1xufVxuZXhwb3J0IGludGVyZmFjZSBDb250ZW50Q2hhbmdlIHtcbiAgICBjb250ZW50OiBhbnk7XG4gICAgZGVsdGE6IERlbHRhO1xuICAgIGVkaXRvcjogUXVpbGxUeXBlO1xuICAgIGh0bWw6IHN0cmluZyB8IG51bGw7XG4gICAgb2xkRGVsdGE6IERlbHRhO1xuICAgIHNvdXJjZTogc3RyaW5nO1xuICAgIHRleHQ6IHN0cmluZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgU2VsZWN0aW9uQ2hhbmdlIHtcbiAgICBlZGl0b3I6IFF1aWxsVHlwZTtcbiAgICBvbGRSYW5nZTogUmFuZ2UgfCBudWxsO1xuICAgIHJhbmdlOiBSYW5nZSB8IG51bGw7XG4gICAgc291cmNlOiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIEJsdXIge1xuICAgIGVkaXRvcjogUXVpbGxUeXBlO1xuICAgIHNvdXJjZTogc3RyaW5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBGb2N1cyB7XG4gICAgZWRpdG9yOiBRdWlsbFR5cGU7XG4gICAgc291cmNlOiBzdHJpbmc7XG59XG5leHBvcnQgZGVjbGFyZSB0eXBlIEVkaXRvckNoYW5nZUNvbnRlbnQgPSBDb250ZW50Q2hhbmdlICYge1xuICAgIGV2ZW50OiAndGV4dC1jaGFuZ2UnO1xufTtcbmV4cG9ydCBkZWNsYXJlIHR5cGUgRWRpdG9yQ2hhbmdlU2VsZWN0aW9uID0gU2VsZWN0aW9uQ2hhbmdlICYge1xuICAgIGV2ZW50OiAnc2VsZWN0aW9uLWNoYW5nZSc7XG59O1xuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgUXVpbGxFZGl0b3JCYXNlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBWYWxpZGF0b3Ige1xuICAgIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY7XG4gICAgcHJvdGVjdGVkIGRvbVNhbml0aXplcjogRG9tU2FuaXRpemVyO1xuICAgIHByb3RlY3RlZCBkb2M6IGFueTtcbiAgICBwcm90ZWN0ZWQgcGxhdGZvcm1JZDogYW55O1xuICAgIHByb3RlY3RlZCByZW5kZXJlcjogUmVuZGVyZXIyO1xuICAgIHByb3RlY3RlZCB6b25lOiBOZ1pvbmU7XG4gICAgcHJvdGVjdGVkIHNlcnZpY2U6IFF1aWxsU2VydmljZTtcbiAgICBxdWlsbEVkaXRvcjogUXVpbGxUeXBlO1xuICAgIGVkaXRvckVsZW06IEhUTUxFbGVtZW50O1xuICAgIGNvbnRlbnQ6IGFueTtcbiAgICBmb3JtYXQ/OiAnb2JqZWN0JyB8ICdodG1sJyB8ICd0ZXh0JyB8ICdqc29uJztcbiAgICB0aGVtZT86IHN0cmluZztcbiAgICBtb2R1bGVzPzogUXVpbGxNb2R1bGVzO1xuICAgIGRlYnVnPzogJ3dhcm4nIHwgJ2xvZycgfCAnZXJyb3InIHwgZmFsc2U7XG4gICAgcmVhZE9ubHk/OiBib29sZWFuO1xuICAgIHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuICAgIG1heExlbmd0aD86IG51bWJlcjtcbiAgICBtaW5MZW5ndGg/OiBudW1iZXI7XG4gICAgcmVxdWlyZWQ6IGJvb2xlYW47XG4gICAgZm9ybWF0cz86IHN0cmluZ1tdIHwgbnVsbDtcbiAgICBjdXN0b21Ub29sYmFyUG9zaXRpb246ICd0b3AnIHwgJ2JvdHRvbSc7XG4gICAgc2FuaXRpemU6IGJvb2xlYW47XG4gICAgc3R5bGVzOiBhbnk7XG4gICAgc3RyaWN0OiBib29sZWFuO1xuICAgIHNjcm9sbGluZ0NvbnRhaW5lcj86IEhUTUxFbGVtZW50IHwgc3RyaW5nIHwgbnVsbDtcbiAgICBib3VuZHM/OiBIVE1MRWxlbWVudCB8IHN0cmluZztcbiAgICBjdXN0b21PcHRpb25zOiBDdXN0b21PcHRpb25bXTtcbiAgICBjdXN0b21Nb2R1bGVzOiBDdXN0b21Nb2R1bGVbXTtcbiAgICB0cmFja0NoYW5nZXM/OiAndXNlcicgfCAnYWxsJztcbiAgICBwcmVzZXJ2ZVdoaXRlc3BhY2U6IGJvb2xlYW47XG4gICAgY2xhc3Nlcz86IHN0cmluZztcbiAgICB0cmltT25WYWxpZGF0aW9uOiBib29sZWFuO1xuICAgIG9uRWRpdG9yQ3JlYXRlZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgb25FZGl0b3JDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8RWRpdG9yQ2hhbmdlQ29udGVudCB8IEVkaXRvckNoYW5nZVNlbGVjdGlvbj47XG4gICAgb25Db250ZW50Q2hhbmdlZDogRXZlbnRFbWl0dGVyPENvbnRlbnRDaGFuZ2U+O1xuICAgIG9uU2VsZWN0aW9uQ2hhbmdlZDogRXZlbnRFbWl0dGVyPFNlbGVjdGlvbkNoYW5nZT47XG4gICAgb25Gb2N1czogRXZlbnRFbWl0dGVyPEZvY3VzPjtcbiAgICBvbkJsdXI6IEV2ZW50RW1pdHRlcjxCbHVyPjtcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcbiAgICBvbk1vZGVsQ2hhbmdlOiAobW9kZWxWYWx1ZT86IGFueSkgPT4gdm9pZDtcbiAgICBvbk1vZGVsVG91Y2hlZDogKCkgPT4gdm9pZDtcbiAgICBvblZhbGlkYXRvckNoYW5nZWQ6ICgpID0+IHZvaWQ7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgZG9tU2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsIGRvYzogYW55LCBwbGF0Zm9ybUlkOiBhbnksIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHpvbmU6IE5nWm9uZSwgc2VydmljZTogUXVpbGxTZXJ2aWNlKTtcbiAgICBzdGF0aWMgbm9ybWFsaXplQ2xhc3NOYW1lcyhjbGFzc2VzOiBzdHJpbmcpOiBzdHJpbmdbXTtcbiAgICB2YWx1ZUdldHRlcjogKHF1aWxsRWRpdG9yOiBRdWlsbFR5cGUsIGVkaXRvckVsZW1lbnQ6IEhUTUxFbGVtZW50KSA9PiBhbnk7XG4gICAgdmFsdWVTZXR0ZXI6IChxdWlsbEVkaXRvcjogUXVpbGxUeXBlLCB2YWx1ZTogYW55KSA9PiBhbnk7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IFByb21pc2U8dm9pZD47XG4gICAgc2VsZWN0aW9uQ2hhbmdlSGFuZGxlcjogKHJhbmdlOiBSYW5nZSwgb2xkUmFuZ2U6IFJhbmdlLCBzb3VyY2U6IHN0cmluZykgPT4gdm9pZDtcbiAgICB0ZXh0Q2hhbmdlSGFuZGxlcjogKGRlbHRhOiBEZWx0YSwgb2xkRGVsdGE6IERlbHRhLCBzb3VyY2U6IHN0cmluZykgPT4gdm9pZDtcbiAgICBlZGl0b3JDaGFuZ2VIYW5kbGVyOiAoZXZlbnQ6IFwidGV4dC1jaGFuZ2VcIiB8IFwic2VsZWN0aW9uLWNoYW5nZVwiLCBjdXJyZW50OiBhbnksIG9sZDogYW55LCBzb3VyY2U6IHN0cmluZykgPT4gdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xuICAgIGFkZENsYXNzZXMoY2xhc3NMaXN0OiBzdHJpbmcpOiB2b2lkO1xuICAgIHJlbW92ZUNsYXNzZXMoY2xhc3NMaXN0OiBzdHJpbmcpOiB2b2lkO1xuICAgIHdyaXRlVmFsdWUoY3VycmVudFZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZD86IGJvb2xlYW4pOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IChtb2RlbFZhbHVlOiBhbnkpID0+IHZvaWQpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiAoKSA9PiB2b2lkKTogdm9pZDtcbiAgICByZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlKGZuOiAoKSA9PiB2b2lkKTogdm9pZDtcbiAgICB2YWxpZGF0ZSgpOiB7XG4gICAgICAgIG1pbkxlbmd0aEVycm9yPzoge1xuICAgICAgICAgICAgZ2l2ZW46IG51bWJlcjtcbiAgICAgICAgICAgIG1pbkxlbmd0aDogbnVtYmVyO1xuICAgICAgICB9O1xuICAgICAgICBtYXhMZW5ndGhFcnJvcj86IHtcbiAgICAgICAgICAgIGdpdmVuOiBudW1iZXI7XG4gICAgICAgICAgICBtYXhMZW5ndGg6IG51bWJlcjtcbiAgICAgICAgfTtcbiAgICAgICAgcmVxdWlyZWRFcnJvcj86IHtcbiAgICAgICAgICAgIGVtcHR5OiBib29sZWFuO1xuICAgICAgICB9O1xuICAgIH07XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBRdWlsbEVkaXRvckNvbXBvbmVudCBleHRlbmRzIFF1aWxsRWRpdG9yQmFzZSB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgZG9tU2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsIGRvYzogYW55LCBwbGF0Zm9ybUlkOiBhbnksIHJlbmRlcmVyOiBSZW5kZXJlcjIsIHpvbmU6IE5nWm9uZSwgc2VydmljZTogUXVpbGxTZXJ2aWNlKTtcbn1cbiJdfQ==
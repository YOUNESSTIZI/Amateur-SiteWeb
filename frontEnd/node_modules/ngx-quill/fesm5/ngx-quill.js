import { __awaiter, __generator, __decorate, __param, __spread, __extends } from 'tslib';
import { isPlatformServer, DOCUMENT, CommonModule } from '@angular/common';
import { InjectionToken, Inject, ɵɵdefineInjectable, ɵɵinject, Injectable, EventEmitter, SecurityContext, ElementRef, PLATFORM_ID, Renderer2, NgZone, Input, Output, Directive, Component, ViewEncapsulation, forwardRef, NgModule } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';

var defaultModules = {
    toolbar: [
        ['bold', 'italic', 'underline', 'strike'],
        ['blockquote', 'code-block'],
        [{ header: 1 }, { header: 2 }],
        [{ list: 'ordered' }, { list: 'bullet' }],
        [{ script: 'sub' }, { script: 'super' }],
        [{ indent: '-1' }, { indent: '+1' }],
        [{ direction: 'rtl' }],
        [{ size: ['small', false, 'large', 'huge'] }],
        [{ header: [1, 2, 3, 4, 5, 6, false] }],
        [
            { color: [] },
            { background: [] }
        ],
        [{ font: [] }],
        [{ align: [] }],
        ['clean'],
        ['link', 'image', 'video'] // link and image, video
    ]
};

var getFormat = function (format, configFormat) {
    var passedFormat = format || configFormat;
    return passedFormat || 'html';
};

var QUILL_CONFIG_TOKEN = new InjectionToken('config');

var QuillService = /** @class */ (function () {
    function QuillService(config) {
        this.config = config;
        this.count = 0;
        if (!this.config) {
            this.config = { modules: defaultModules };
        }
    }
    QuillService.prototype.getQuill = function () {
        var _this = this;
        this.count++;
        if (!this.Quill && this.count === 1) {
            this.$importPromise = new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var quillImport;
                var _this = this;
                var _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, import('quill')];
                        case 1:
                            quillImport = _c.sent();
                            this.Quill = (quillImport.default ? quillImport.default : quillImport);
                            // Only register custom options and modules once
                            (_a = this.config.customOptions) === null || _a === void 0 ? void 0 : _a.forEach(function (customOption) {
                                var newCustomOption = _this.Quill.import(customOption.import);
                                newCustomOption.whitelist = customOption.whitelist;
                                _this.Quill.register(newCustomOption, true, _this.config.suppressGlobalRegisterWarning);
                            });
                            (_b = this.config.customModules) === null || _b === void 0 ? void 0 : _b.forEach(function (_a) {
                                var implementation = _a.implementation, path = _a.path;
                                _this.Quill.register(path, implementation, _this.config.suppressGlobalRegisterWarning);
                            });
                            resolve(this.Quill);
                            return [2 /*return*/];
                    }
                });
            }); });
        }
        return this.$importPromise;
    };
    QuillService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [QUILL_CONFIG_TOKEN,] }] }
    ]; };
    QuillService.ɵprov = ɵɵdefineInjectable({ factory: function QuillService_Factory() { return new QuillService(ɵɵinject(QUILL_CONFIG_TOKEN)); }, token: QuillService, providedIn: "root" });
    QuillService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __param(0, Inject(QUILL_CONFIG_TOKEN))
    ], QuillService);
    return QuillService;
}());

var QuillEditorBase = /** @class */ (function () {
    function QuillEditorBase(elementRef, domSanitizer, doc, platformId, renderer, zone, service) {
        var _this = this;
        this.elementRef = elementRef;
        this.domSanitizer = domSanitizer;
        this.doc = doc;
        this.platformId = platformId;
        this.renderer = renderer;
        this.zone = zone;
        this.service = service;
        this.required = false;
        this.customToolbarPosition = 'top';
        this.sanitize = false;
        this.styles = null;
        this.strict = true;
        this.customOptions = [];
        this.customModules = [];
        this.preserveWhitespace = false;
        this.trimOnValidation = false;
        this.onEditorCreated = new EventEmitter();
        this.onEditorChanged = new EventEmitter();
        this.onContentChanged = new EventEmitter();
        this.onSelectionChanged = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.onBlur = new EventEmitter();
        this.disabled = false; // used to store initial value before ViewInit
        this.valueGetter = function (quillEditor, editorElement) {
            var html = editorElement.querySelector('.ql-editor').innerHTML;
            if (html === '<p><br></p>' || html === '<div><br></div>') {
                html = null;
            }
            var modelValue = html;
            var format = getFormat(_this.format, _this.service.config.format);
            if (format === 'text') {
                modelValue = quillEditor.getText();
            }
            else if (format === 'object') {
                modelValue = quillEditor.getContents();
            }
            else if (format === 'json') {
                try {
                    modelValue = JSON.stringify(quillEditor.getContents());
                }
                catch (e) {
                    modelValue = quillEditor.getText();
                }
            }
            return modelValue;
        };
        this.valueSetter = function (quillEditor, value) {
            var format = getFormat(_this.format, _this.service.config.format);
            if (format === 'html') {
                if (_this.sanitize) {
                    value = _this.domSanitizer.sanitize(SecurityContext.HTML, value);
                }
                return quillEditor.clipboard.convert(value);
            }
            else if (format === 'json') {
                try {
                    return JSON.parse(value);
                }
                catch (e) {
                    return [{ insert: value }];
                }
            }
            return value;
        };
        this.selectionChangeHandler = function (range, oldRange, source) {
            var shouldTriggerOnModelTouched = !range && !!_this.onModelTouched;
            // only emit changes when there's any listener
            if (!_this.onBlur.observers.length &&
                !_this.onFocus.observers.length &&
                !_this.onSelectionChanged.observers.length &&
                !shouldTriggerOnModelTouched) {
                return;
            }
            _this.zone.run(function () {
                if (range === null) {
                    _this.onBlur.emit({
                        editor: _this.quillEditor,
                        source: source
                    });
                }
                else if (oldRange === null) {
                    _this.onFocus.emit({
                        editor: _this.quillEditor,
                        source: source
                    });
                }
                _this.onSelectionChanged.emit({
                    editor: _this.quillEditor,
                    oldRange: oldRange,
                    range: range,
                    source: source
                });
                if (shouldTriggerOnModelTouched) {
                    _this.onModelTouched();
                }
            });
        };
        this.textChangeHandler = function (delta, oldDelta, source) {
            // only emit changes emitted by user interactions
            var text = _this.quillEditor.getText();
            var content = _this.quillEditor.getContents();
            var html = _this.editorElem.querySelector('.ql-editor').innerHTML;
            if (html === '<p><br></p>' || html === '<div><br></div>') {
                html = null;
            }
            var trackChanges = _this.trackChanges || _this.service.config.trackChanges;
            var shouldTriggerOnModelChange = (source === 'user' || trackChanges && trackChanges === 'all') && !!_this.onModelChange;
            // only emit changes when there's any listener
            if (!_this.onContentChanged.observers.length && !shouldTriggerOnModelChange) {
                return;
            }
            _this.zone.run(function () {
                if (shouldTriggerOnModelChange) {
                    _this.onModelChange(_this.valueGetter(_this.quillEditor, _this.editorElem));
                }
                _this.onContentChanged.emit({
                    content: content,
                    delta: delta,
                    editor: _this.quillEditor,
                    html: html,
                    oldDelta: oldDelta,
                    source: source,
                    text: text
                });
            });
        };
        // tslint:disable-next-line:max-line-length
        this.editorChangeHandler = function (event, current, old, source) {
            // only emit changes when there's any listener
            if (!_this.onEditorChanged.observers.length) {
                return;
            }
            // only emit changes emitted by user interactions
            if (event === 'text-change') {
                var text_1 = _this.quillEditor.getText();
                var content_1 = _this.quillEditor.getContents();
                var html_1 = _this.editorElem.querySelector('.ql-editor').innerHTML;
                if (html_1 === '<p><br></p>' || html_1 === '<div><br></div>') {
                    html_1 = null;
                }
                _this.zone.run(function () {
                    _this.onEditorChanged.emit({
                        content: content_1,
                        delta: current,
                        editor: _this.quillEditor,
                        event: event,
                        html: html_1,
                        oldDelta: old,
                        source: source,
                        text: text_1
                    });
                });
            }
            else {
                _this.onEditorChanged.emit({
                    editor: _this.quillEditor,
                    event: event,
                    oldRange: old,
                    range: current,
                    source: source
                });
            }
        };
    }
    QuillEditorBase_1 = QuillEditorBase;
    QuillEditorBase.normalizeClassNames = function (classes) {
        var classList = classes.trim().split(' ');
        return classList.reduce(function (prev, cur) {
            var trimmed = cur.trim();
            if (trimmed) {
                prev.push(trimmed);
            }
            return prev;
        }, []);
    };
    QuillEditorBase.prototype.ngAfterViewInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var Quill, toolbarElem, modules, placeholder, bounds, debug, readOnly, scrollingContainer, formats, format, contents;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (isPlatformServer(this.platformId)) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.service.getQuill()];
                    case 1:
                        Quill = _a.sent();
                        this.elementRef.nativeElement.insertAdjacentHTML(this.customToolbarPosition === 'top' ? 'beforeend' : 'afterbegin', this.preserveWhitespace ? '<pre quill-editor-element></pre>' : '<div quill-editor-element></div>');
                        this.editorElem = this.elementRef.nativeElement.querySelector('[quill-editor-element]');
                        toolbarElem = this.elementRef.nativeElement.querySelector('[quill-editor-toolbar]');
                        modules = Object.assign({}, this.modules || this.service.config.modules);
                        if (toolbarElem) {
                            modules.toolbar = toolbarElem;
                        }
                        else if (modules.toolbar === undefined) {
                            modules.toolbar = defaultModules.toolbar;
                        }
                        placeholder = this.placeholder !== undefined ? this.placeholder : this.service.config.placeholder;
                        if (placeholder === undefined) {
                            placeholder = 'Insert text here ...';
                        }
                        if (this.styles) {
                            Object.keys(this.styles).forEach(function (key) {
                                _this.renderer.setStyle(_this.editorElem, key, _this.styles[key]);
                            });
                        }
                        if (this.classes) {
                            this.addClasses(this.classes);
                        }
                        this.customOptions.forEach(function (customOption) {
                            var newCustomOption = Quill.import(customOption.import);
                            newCustomOption.whitelist = customOption.whitelist;
                            Quill.register(newCustomOption, true);
                        });
                        this.customModules.forEach(function (_a) {
                            var implementation = _a.implementation, path = _a.path;
                            Quill.register(path, implementation);
                        });
                        bounds = this.bounds && this.bounds === 'self' ? this.editorElem : this.bounds;
                        if (!bounds) {
                            bounds = this.service.config.bounds ? this.service.config.bounds : this.doc.body;
                        }
                        debug = this.debug;
                        if (!debug && debug !== false && this.service.config.debug) {
                            debug = this.service.config.debug;
                        }
                        readOnly = this.readOnly;
                        if (!readOnly && this.readOnly !== false) {
                            readOnly = this.service.config.readOnly !== undefined ? this.service.config.readOnly : false;
                        }
                        scrollingContainer = this.scrollingContainer;
                        if (!scrollingContainer && this.scrollingContainer !== null) {
                            scrollingContainer =
                                this.service.config.scrollingContainer === null
                                    || this.service.config.scrollingContainer ? this.service.config.scrollingContainer : null;
                        }
                        formats = this.formats;
                        if (!formats && formats === undefined) {
                            formats = this.service.config.formats ? __spread(this.service.config.formats) : (this.service.config.formats === null ? null : undefined);
                        }
                        this.zone.runOutsideAngular(function () {
                            _this.quillEditor = new Quill(_this.editorElem, {
                                bounds: bounds,
                                debug: debug,
                                formats: formats,
                                modules: modules,
                                placeholder: placeholder,
                                readOnly: readOnly,
                                scrollingContainer: scrollingContainer,
                                strict: _this.strict,
                                theme: _this.theme || (_this.service.config.theme ? _this.service.config.theme : 'snow')
                            });
                        });
                        if (this.content) {
                            format = getFormat(this.format, this.service.config.format);
                            if (format === 'object') {
                                this.quillEditor.setContents(this.content, 'silent');
                            }
                            else if (format === 'text') {
                                this.quillEditor.setText(this.content, 'silent');
                            }
                            else if (format === 'json') {
                                try {
                                    this.quillEditor.setContents(JSON.parse(this.content), 'silent');
                                }
                                catch (e) {
                                    this.quillEditor.setText(this.content, 'silent');
                                }
                            }
                            else {
                                if (this.sanitize) {
                                    this.content = this.domSanitizer.sanitize(SecurityContext.HTML, this.content);
                                }
                                contents = this.quillEditor.clipboard.convert(this.content);
                                this.quillEditor.setContents(contents, 'silent');
                            }
                            this.quillEditor.getModule('history').clear();
                        }
                        // initialize disabled status based on this.disabled as default value
                        this.setDisabledState();
                        // triggered if selection or text changed
                        this.quillEditor.on('editor-change', this.editorChangeHandler);
                        // mark model as touched if editor lost focus
                        this.quillEditor.on('selection-change', this.selectionChangeHandler);
                        // update model if text changes
                        this.quillEditor.on('text-change', this.textChangeHandler);
                        // trigger created in a timeout to avoid changed models after checked
                        // if you are using the editor api in created output to change the editor content
                        setTimeout(function () {
                            if (_this.onValidatorChanged) {
                                _this.onValidatorChanged();
                            }
                            _this.onEditorCreated.emit(_this.quillEditor);
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    QuillEditorBase.prototype.ngOnDestroy = function () {
        if (this.quillEditor) {
            this.quillEditor.off('selection-change', this.selectionChangeHandler);
            this.quillEditor.off('text-change', this.textChangeHandler);
            this.quillEditor.off('editor-change', this.editorChangeHandler);
        }
    };
    QuillEditorBase.prototype.ngOnChanges = function (changes) {
        var _this = this;
        if (!this.quillEditor) {
            return;
        }
        // tslint:disable:no-string-literal
        if (changes['readOnly']) {
            this.quillEditor.enable(!changes['readOnly'].currentValue);
        }
        if (changes['placeholder']) {
            this.quillEditor.root.dataset.placeholder =
                changes['placeholder'].currentValue;
        }
        if (changes['styles']) {
            var currentStyling = changes['styles'].currentValue;
            var previousStyling = changes['styles'].previousValue;
            if (previousStyling) {
                Object.keys(previousStyling).forEach(function (key) {
                    _this.renderer.removeStyle(_this.editorElem, key);
                });
            }
            if (currentStyling) {
                Object.keys(currentStyling).forEach(function (key) {
                    _this.renderer.setStyle(_this.editorElem, key, _this.styles[key]);
                });
            }
        }
        if (changes['classes']) {
            var currentClasses = changes['classes'].currentValue;
            var previousClasses = changes['classes'].previousValue;
            if (previousClasses) {
                this.removeClasses(previousClasses);
            }
            if (currentClasses) {
                this.addClasses(currentClasses);
            }
        }
        // tslint:enable:no-string-literal
    };
    QuillEditorBase.prototype.addClasses = function (classList) {
        var _this = this;
        QuillEditorBase_1.normalizeClassNames(classList).forEach(function (c) {
            _this.renderer.addClass(_this.editorElem, c);
        });
    };
    QuillEditorBase.prototype.removeClasses = function (classList) {
        var _this = this;
        QuillEditorBase_1.normalizeClassNames(classList).forEach(function (c) {
            _this.renderer.removeClass(_this.editorElem, c);
        });
    };
    QuillEditorBase.prototype.writeValue = function (currentValue) {
        this.content = currentValue;
        var format = getFormat(this.format, this.service.config.format);
        if (this.quillEditor) {
            if (currentValue) {
                if (format === 'text') {
                    this.quillEditor.setText(currentValue);
                }
                else {
                    this.quillEditor.setContents(this.valueSetter(this.quillEditor, this.content));
                }
                return;
            }
            this.quillEditor.setText('');
        }
    };
    QuillEditorBase.prototype.setDisabledState = function (isDisabled) {
        if (isDisabled === void 0) { isDisabled = this.disabled; }
        // store initial value to set appropriate disabled status after ViewInit
        this.disabled = isDisabled;
        if (this.quillEditor) {
            if (isDisabled) {
                this.quillEditor.disable();
                this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'disabled');
            }
            else {
                if (!this.readOnly) {
                    this.quillEditor.enable();
                }
                this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');
            }
        }
    };
    QuillEditorBase.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    QuillEditorBase.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    QuillEditorBase.prototype.registerOnValidatorChange = function (fn) {
        this.onValidatorChanged = fn;
    };
    QuillEditorBase.prototype.validate = function () {
        if (!this.quillEditor) {
            return null;
        }
        var err = {};
        var valid = true;
        var text = this.quillEditor.getText();
        // trim text if wanted + handle special case that an empty editor contains a new line
        var textLength = this.trimOnValidation ? text.trim().length : (text.length === 1 && text.trim().length === 0 ? 0 : text.length - 1);
        if (this.minLength && textLength && textLength < this.minLength) {
            err.minLengthError = {
                given: textLength,
                minLength: this.minLength
            };
            valid = false;
        }
        if (this.maxLength && textLength > this.maxLength) {
            err.maxLengthError = {
                given: textLength,
                maxLength: this.maxLength
            };
            valid = false;
        }
        if (this.required && !textLength) {
            err.requiredError = {
                empty: true
            };
            valid = false;
        }
        return valid ? null : err;
    };
    var QuillEditorBase_1;
    QuillEditorBase.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DomSanitizer },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: Renderer2 },
        { type: NgZone },
        { type: QuillService }
    ]; };
    __decorate([
        Input()
    ], QuillEditorBase.prototype, "format", void 0);
    __decorate([
        Input()
    ], QuillEditorBase.prototype, "theme", void 0);
    __decorate([
        Input()
    ], QuillEditorBase.prototype, "modules", void 0);
    __decorate([
        Input()
    ], QuillEditorBase.prototype, "debug", void 0);
    __decorate([
        Input()
    ], QuillEditorBase.prototype, "readOnly", void 0);
    __decorate([
        Input()
    ], QuillEditorBase.prototype, "placeholder", void 0);
    __decorate([
        Input()
    ], QuillEditorBase.prototype, "maxLength", void 0);
    __decorate([
        Input()
    ], QuillEditorBase.prototype, "minLength", void 0);
    __decorate([
        Input()
    ], QuillEditorBase.prototype, "required", void 0);
    __decorate([
        Input()
    ], QuillEditorBase.prototype, "formats", void 0);
    __decorate([
        Input()
    ], QuillEditorBase.prototype, "customToolbarPosition", void 0);
    __decorate([
        Input()
    ], QuillEditorBase.prototype, "sanitize", void 0);
    __decorate([
        Input()
    ], QuillEditorBase.prototype, "styles", void 0);
    __decorate([
        Input()
    ], QuillEditorBase.prototype, "strict", void 0);
    __decorate([
        Input()
    ], QuillEditorBase.prototype, "scrollingContainer", void 0);
    __decorate([
        Input()
    ], QuillEditorBase.prototype, "bounds", void 0);
    __decorate([
        Input()
    ], QuillEditorBase.prototype, "customOptions", void 0);
    __decorate([
        Input()
    ], QuillEditorBase.prototype, "customModules", void 0);
    __decorate([
        Input()
    ], QuillEditorBase.prototype, "trackChanges", void 0);
    __decorate([
        Input()
    ], QuillEditorBase.prototype, "preserveWhitespace", void 0);
    __decorate([
        Input()
    ], QuillEditorBase.prototype, "classes", void 0);
    __decorate([
        Input()
    ], QuillEditorBase.prototype, "trimOnValidation", void 0);
    __decorate([
        Output()
    ], QuillEditorBase.prototype, "onEditorCreated", void 0);
    __decorate([
        Output()
    ], QuillEditorBase.prototype, "onEditorChanged", void 0);
    __decorate([
        Output()
    ], QuillEditorBase.prototype, "onContentChanged", void 0);
    __decorate([
        Output()
    ], QuillEditorBase.prototype, "onSelectionChanged", void 0);
    __decorate([
        Output()
    ], QuillEditorBase.prototype, "onFocus", void 0);
    __decorate([
        Output()
    ], QuillEditorBase.prototype, "onBlur", void 0);
    __decorate([
        Input()
    ], QuillEditorBase.prototype, "valueGetter", void 0);
    __decorate([
        Input()
    ], QuillEditorBase.prototype, "valueSetter", void 0);
    QuillEditorBase = QuillEditorBase_1 = __decorate([
        Directive()
        // tslint:disable-next-line:directive-class-suffix
        ,
        __param(2, Inject(DOCUMENT)),
        __param(3, Inject(PLATFORM_ID))
    ], QuillEditorBase);
    return QuillEditorBase;
}());
var QuillEditorComponent = /** @class */ (function (_super) {
    __extends(QuillEditorComponent, _super);
    function QuillEditorComponent(elementRef, domSanitizer, doc, platformId, renderer, zone, service) {
        return _super.call(this, elementRef, domSanitizer, doc, platformId, renderer, zone, service) || this;
    }
    QuillEditorComponent_1 = QuillEditorComponent;
    var QuillEditorComponent_1;
    QuillEditorComponent.ctorParameters = function () { return [
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: DomSanitizer, decorators: [{ type: Inject, args: [DomSanitizer,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
        { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
        { type: QuillService, decorators: [{ type: Inject, args: [QuillService,] }] }
    ]; };
    QuillEditorComponent = QuillEditorComponent_1 = __decorate([
        Component({
            encapsulation: ViewEncapsulation.None,
            providers: [
                {
                    multi: true,
                    provide: NG_VALUE_ACCESSOR,
                    // eslint-disable-next-line @typescript-eslint/no-use-before-define
                    useExisting: forwardRef(function () { return QuillEditorComponent_1; })
                },
                {
                    multi: true,
                    provide: NG_VALIDATORS,
                    // eslint-disable-next-line @typescript-eslint/no-use-before-define
                    useExisting: forwardRef(function () { return QuillEditorComponent_1; })
                }
            ],
            selector: 'quill-editor',
            template: "\n  <ng-content select=\"[quill-editor-toolbar]\"></ng-content>\n"
        }),
        __param(0, Inject(ElementRef)),
        __param(1, Inject(DomSanitizer)),
        __param(2, Inject(DOCUMENT)),
        __param(3, Inject(PLATFORM_ID)),
        __param(4, Inject(Renderer2)),
        __param(5, Inject(NgZone)),
        __param(6, Inject(QuillService))
    ], QuillEditorComponent);
    return QuillEditorComponent;
}(QuillEditorBase));

var QuillViewHTMLComponent = /** @class */ (function () {
    function QuillViewHTMLComponent(sanitizer, service) {
        this.sanitizer = sanitizer;
        this.service = service;
        this.innerHTML = '';
        this.themeClass = 'ql-snow';
        this.content = '';
    }
    QuillViewHTMLComponent.prototype.ngOnChanges = function (changes) {
        if (changes.theme) {
            var theme = changes.theme.currentValue || (this.service.config.theme ? this.service.config.theme : 'snow');
            this.themeClass = "ql-" + theme + " ngx-quill-view-html";
        }
        else if (!this.theme) {
            var theme = this.service.config.theme ? this.service.config.theme : 'snow';
            this.themeClass = "ql-" + theme + " ngx-quill-view-html";
        }
        if (changes.content) {
            this.innerHTML = this.sanitizer.bypassSecurityTrustHtml(changes.content.currentValue);
        }
    };
    QuillViewHTMLComponent.ctorParameters = function () { return [
        { type: DomSanitizer, decorators: [{ type: Inject, args: [DomSanitizer,] }] },
        { type: QuillService }
    ]; };
    __decorate([
        Input()
    ], QuillViewHTMLComponent.prototype, "content", void 0);
    __decorate([
        Input()
    ], QuillViewHTMLComponent.prototype, "theme", void 0);
    QuillViewHTMLComponent = __decorate([
        Component({
            encapsulation: ViewEncapsulation.None,
            selector: 'quill-view-html',
            template: "\n  <div class=\"ql-container\" [ngClass]=\"themeClass\">\n    <div class=\"ql-editor\" [innerHTML]=\"innerHTML\">\n    </div>\n  </div>\n",
            styles: ["\n.ql-container.ngx-quill-view-html {\n  border: 0;\n}\n"]
        }),
        __param(0, Inject(DomSanitizer))
    ], QuillViewHTMLComponent);
    return QuillViewHTMLComponent;
}());

var QuillViewComponent = /** @class */ (function () {
    function QuillViewComponent(platformId, renderer, elementRef, zone, service) {
        var _this = this;
        this.platformId = platformId;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.zone = zone;
        this.service = service;
        this.strict = true;
        this.customModules = [];
        this.customOptions = [];
        this.preserveWhitespace = false;
        this.valueSetter = function (quillEditor, value) {
            var format = getFormat(_this.format, _this.service.config.format);
            var content = value;
            if (format === 'html' || format === 'text') {
                content = quillEditor.clipboard.convert(value);
            }
            else if (format === 'json') {
                try {
                    content = JSON.parse(value);
                }
                catch (e) {
                    content = [{ insert: value }];
                }
            }
            quillEditor.setContents(content);
        };
    }
    QuillViewComponent.prototype.ngOnChanges = function (changes) {
        if (!this.quillEditor) {
            return;
        }
        if (changes.content) {
            this.valueSetter(this.quillEditor, changes.content.currentValue);
        }
    };
    QuillViewComponent.prototype.ngAfterViewInit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var Quill, modules, debug, formats, theme;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (isPlatformServer(this.platformId)) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.service.getQuill()];
                    case 1:
                        Quill = _a.sent();
                        modules = Object.assign({}, this.modules || this.service.config.modules);
                        modules.toolbar = false;
                        this.customOptions.forEach(function (customOption) {
                            var newCustomOption = Quill.import(customOption.import);
                            newCustomOption.whitelist = customOption.whitelist;
                            Quill.register(newCustomOption, true);
                        });
                        this.customModules.forEach(function (_a) {
                            var implementation = _a.implementation, path = _a.path;
                            Quill.register(path, implementation);
                        });
                        debug = this.debug;
                        if (!debug && debug !== false && this.service.config.debug) {
                            debug = this.service.config.debug;
                        }
                        formats = this.formats;
                        if (!formats && formats === undefined) {
                            formats = this.service.config.formats ?
                                Object.assign({}, this.service.config.formats) : (this.service.config.formats === null ? null : undefined);
                        }
                        theme = this.theme || (this.service.config.theme ? this.service.config.theme : 'snow');
                        this.elementRef.nativeElement.insertAdjacentHTML('afterbegin', this.preserveWhitespace ? '<pre quill-view-element></pre>' : '<div quill-view-element></div>');
                        this.editorElem = this.elementRef.nativeElement.querySelector('[quill-view-element]');
                        this.zone.runOutsideAngular(function () {
                            _this.quillEditor = new Quill(_this.editorElem, {
                                debug: debug,
                                formats: formats,
                                modules: modules,
                                readOnly: true,
                                strict: _this.strict,
                                theme: theme
                            });
                        });
                        this.renderer.addClass(this.editorElem, 'ngx-quill-view');
                        if (this.content) {
                            this.valueSetter(this.quillEditor, this.content);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    QuillViewComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: Renderer2, decorators: [{ type: Inject, args: [Renderer2,] }] },
        { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
        { type: NgZone, decorators: [{ type: Inject, args: [NgZone,] }] },
        { type: QuillService, decorators: [{ type: Inject, args: [QuillService,] }] }
    ]; };
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "format", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "theme", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "modules", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "debug", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "formats", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "strict", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "content", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "customModules", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "customOptions", void 0);
    __decorate([
        Input()
    ], QuillViewComponent.prototype, "preserveWhitespace", void 0);
    QuillViewComponent = __decorate([
        Component({
            encapsulation: ViewEncapsulation.None,
            selector: 'quill-view',
            template: "\n",
            styles: ["\n.ql-container.ngx-quill-view {\n  border: 0;\n}\n"]
        }),
        __param(0, Inject(PLATFORM_ID)),
        __param(1, Inject(Renderer2)),
        __param(2, Inject(ElementRef)),
        __param(3, Inject(NgZone)),
        __param(4, Inject(QuillService))
    ], QuillViewComponent);
    return QuillViewComponent;
}());

var QuillModule = /** @class */ (function () {
    function QuillModule() {
    }
    QuillModule_1 = QuillModule;
    QuillModule.forRoot = function (config) {
        return {
            ngModule: QuillModule_1,
            providers: [
                {
                    provide: QUILL_CONFIG_TOKEN,
                    useValue: config
                }
            ]
        };
    };
    var QuillModule_1;
    QuillModule = QuillModule_1 = __decorate([
        NgModule({
            declarations: [
                QuillEditorComponent,
                QuillViewComponent,
                QuillViewHTMLComponent
            ],
            exports: [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent],
            imports: [CommonModule],
            providers: [QuillService]
        })
    ], QuillModule);
    return QuillModule;
}());

/*
 * Public API Surface of ngx-quill
 */

/**
 * Generated bundle index. Do not edit.
 */

export { QUILL_CONFIG_TOKEN, QuillEditorBase, QuillEditorComponent, QuillModule, QuillService, QuillViewComponent, QuillViewHTMLComponent, defaultModules };
//# sourceMappingURL=ngx-quill.js.map

import { __awaiter, __decorate, __generator, __param } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { QUILL_CONFIG_TOKEN } from './quill-editor.interfaces';
import { defaultModules } from './quill-defaults';
import * as i0 from "@angular/core";
import * as i1 from "./quill-editor.interfaces";
var QuillService = /** @class */ (function () {
    function QuillService(config) {
        this.config = config;
        this.count = 0;
        if (!this.config) {
            this.config = { modules: defaultModules };
        }
    }
    QuillService.prototype.getQuill = function () {
        var _this = this;
        this.count++;
        if (!this.Quill && this.count === 1) {
            this.$importPromise = new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                var quillImport;
                var _this = this;
                var _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0: return [4 /*yield*/, import('quill')];
                        case 1:
                            quillImport = _c.sent();
                            this.Quill = (quillImport.default ? quillImport.default : quillImport);
                            // Only register custom options and modules once
                            (_a = this.config.customOptions) === null || _a === void 0 ? void 0 : _a.forEach(function (customOption) {
                                var newCustomOption = _this.Quill.import(customOption.import);
                                newCustomOption.whitelist = customOption.whitelist;
                                _this.Quill.register(newCustomOption, true, _this.config.suppressGlobalRegisterWarning);
                            });
                            (_b = this.config.customModules) === null || _b === void 0 ? void 0 : _b.forEach(function (_a) {
                                var implementation = _a.implementation, path = _a.path;
                                _this.Quill.register(path, implementation, _this.config.suppressGlobalRegisterWarning);
                            });
                            resolve(this.Quill);
                            return [2 /*return*/];
                    }
                });
            }); });
        }
        return this.$importPromise;
    };
    QuillService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [QUILL_CONFIG_TOKEN,] }] }
    ]; };
    QuillService.ɵprov = i0.ɵɵdefineInjectable({ factory: function QuillService_Factory() { return new QuillService(i0.ɵɵinject(i1.QUILL_CONFIG_TOKEN)); }, token: QuillService, providedIn: "root" });
    QuillService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __param(0, Inject(QUILL_CONFIG_TOKEN))
    ], QuillService);
    return QuillService;
}());
export { QuillService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpbGwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1xdWlsbC8iLCJzb3VyY2VzIjpbImxpYi9xdWlsbC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUNsRCxPQUFPLEVBQUUsa0JBQWtCLEVBQWUsTUFBTSwyQkFBMkIsQ0FBQTtBQUMzRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUE7OztBQUtqRDtJQUtFLHNCQUNxQyxNQUFtQjtRQUFuQixXQUFNLEdBQU4sTUFBTSxDQUFhO1FBSGhELFVBQUssR0FBRyxDQUFDLENBQUE7UUFLZixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNoQixJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxDQUFBO1NBQzFDO0lBQ0gsQ0FBQztJQUVELCtCQUFRLEdBQVI7UUFBQSxpQkF1QkM7UUF0QkMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ1osSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDLEVBQUU7WUFDbkMsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxVQUFPLE9BQU87Ozs7OztnQ0FDMUIscUJBQU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxFQUFBOzs0QkFBbkMsV0FBVyxHQUFHLFNBQXFCOzRCQUV6QyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFRLENBQUE7NEJBRTdFLGdEQUFnRDs0QkFDaEQsTUFBQSxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsMENBQUUsT0FBTyxDQUFDLFVBQUMsWUFBWTtnQ0FDOUMsSUFBTSxlQUFlLEdBQUcsS0FBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFBO2dDQUM5RCxlQUFlLENBQUMsU0FBUyxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUE7Z0NBQ2xELEtBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxJQUFJLEVBQUUsS0FBSSxDQUFDLE1BQU0sQ0FBQyw2QkFBNkIsQ0FBQyxDQUFBOzRCQUN2RixDQUFDLEVBQUM7NEJBRUYsTUFBQSxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsMENBQUUsT0FBTyxDQUFDLFVBQUMsRUFBc0I7b0NBQXJCLGtDQUFjLEVBQUUsY0FBSTtnQ0FDdkQsS0FBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSxLQUFJLENBQUMsTUFBTSxDQUFDLDZCQUE2QixDQUFDLENBQUE7NEJBQ3RGLENBQUMsRUFBQzs0QkFFRixPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBOzs7O2lCQUNwQixDQUFDLENBQUE7U0FDSDtRQUNELE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQTtJQUM1QixDQUFDOztnREE5QkUsTUFBTSxTQUFDLGtCQUFrQjs7O0lBTmpCLFlBQVk7UUFIeEIsVUFBVSxDQUFDO1lBQ1YsVUFBVSxFQUFFLE1BQU07U0FDbkIsQ0FBQztRQU9HLFdBQUEsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUE7T0FObEIsWUFBWSxDQXFDeEI7dUJBNUNEO0NBNENDLEFBckNELElBcUNDO1NBckNZLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJ1xuaW1wb3J0IHsgUVVJTExfQ09ORklHX1RPS0VOLCBRdWlsbENvbmZpZyB9IGZyb20gJy4vcXVpbGwtZWRpdG9yLmludGVyZmFjZXMnXG5pbXBvcnQgeyBkZWZhdWx0TW9kdWxlcyB9IGZyb20gJy4vcXVpbGwtZGVmYXVsdHMnXG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFF1aWxsU2VydmljZSB7XG4gIHByaXZhdGUgUXVpbGwhOiBhbnlcbiAgcHJpdmF0ZSAkaW1wb3J0UHJvbWlzZSE6IFByb21pc2U8YW55PlxuICBwcml2YXRlIGNvdW50ID0gMFxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBJbmplY3QoUVVJTExfQ09ORklHX1RPS0VOKSBwdWJsaWMgY29uZmlnOiBRdWlsbENvbmZpZ1xuICApIHtcbiAgICBpZiAoIXRoaXMuY29uZmlnKSB7XG4gICAgICB0aGlzLmNvbmZpZyA9IHvCoG1vZHVsZXM6IGRlZmF1bHRNb2R1bGVzIH1cbiAgICB9XG4gIH1cblxuICBnZXRRdWlsbCgpIHtcbiAgICB0aGlzLmNvdW50KytcbiAgICBpZiAoIXRoaXMuUXVpbGwgJiYgdGhpcy5jb3VudCA9PT0gMSkge1xuICAgICAgdGhpcy4kaW1wb3J0UHJvbWlzZSA9IG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGNvbnN0IHF1aWxsSW1wb3J0ID0gYXdhaXQgaW1wb3J0KCdxdWlsbCcpXG5cbiAgICAgICAgdGhpcy5RdWlsbCA9IChxdWlsbEltcG9ydC5kZWZhdWx0ID8gcXVpbGxJbXBvcnQuZGVmYXVsdCA6IHF1aWxsSW1wb3J0KSBhcyBhbnlcblxuICAgICAgICAvLyBPbmx5IHJlZ2lzdGVyIGN1c3RvbSBvcHRpb25zIGFuZCBtb2R1bGVzIG9uY2VcbiAgICAgICAgdGhpcy5jb25maWcuY3VzdG9tT3B0aW9ucz8uZm9yRWFjaCgoY3VzdG9tT3B0aW9uKSA9PiB7XG4gICAgICAgICAgY29uc3QgbmV3Q3VzdG9tT3B0aW9uID0gdGhpcy5RdWlsbC5pbXBvcnQoY3VzdG9tT3B0aW9uLmltcG9ydClcbiAgICAgICAgICBuZXdDdXN0b21PcHRpb24ud2hpdGVsaXN0ID0gY3VzdG9tT3B0aW9uLndoaXRlbGlzdFxuICAgICAgICAgIHRoaXMuUXVpbGwucmVnaXN0ZXIobmV3Q3VzdG9tT3B0aW9uLCB0cnVlLCB0aGlzLmNvbmZpZy5zdXBwcmVzc0dsb2JhbFJlZ2lzdGVyV2FybmluZylcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLmNvbmZpZy5jdXN0b21Nb2R1bGVzPy5mb3JFYWNoKCh7aW1wbGVtZW50YXRpb24sIHBhdGh9KSA9PiB7XG4gICAgICAgICAgdGhpcy5RdWlsbC5yZWdpc3RlcihwYXRoLCBpbXBsZW1lbnRhdGlvbiwgdGhpcy5jb25maWcuc3VwcHJlc3NHbG9iYWxSZWdpc3Rlcldhcm5pbmcpXG4gICAgICAgIH0pXG5cbiAgICAgICAgcmVzb2x2ZSh0aGlzLlF1aWxsKVxuICAgICAgfSlcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuJGltcG9ydFByb21pc2VcbiAgfVxufVxuIl19
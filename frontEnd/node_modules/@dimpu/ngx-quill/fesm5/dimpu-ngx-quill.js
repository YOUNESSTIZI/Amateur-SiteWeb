import { __assign } from 'tslib';
import { Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewEncapsulation, NgModule } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import 'katex';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var Quill;
var NgxQuillComponent = /** @class */ (function () {
    function NgxQuillComponent(elementRef) {
        this.elementRef = elementRef;
        this.defaultModules = {
            toolbar: [
                ['bold', 'italic', 'underline', 'strike'],
                ['blockquote', 'code-block'],
                [{ 'header': 1 }, { 'header': 2 }],
                [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                [{ 'script': 'sub' }, { 'script': 'super' }],
                [{ 'indent': '-1' }, { 'indent': '+1' }],
                [{ 'direction': 'rtl' }],
                [{ 'size': ['small', false, 'large', 'huge'] }],
                [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                [{ 'color': new Array() }, { 'background': new Array() }],
                [{ 'font': new Array() }],
                [{ 'align': new Array() }],
                ['clean'],
                ['link', 'image', 'video'] // link and image, video
            ]
        };
        this.options = {};
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.change = new EventEmitter();
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    /**
     * @return {?}
     */
    NgxQuillComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var toolbarElem = this.elementRef.nativeElement.querySelector('[ngx-quill-toolbar]');
        this.elementRef.nativeElement.insertAdjacentHTML('beforeend', '<div ngx-quill-element></div>');
        this.editorElem = this.elementRef.nativeElement.querySelector('[ngx-quill-element]');
        if (!Quill) {
            Quill = require('quill');
        }
        this.options = __assign({
            modules: this.defaultModules,
            placeholder: 'Insert text here ...',
            readOnly: false,
            theme: 'snow',
            boundary: document.body
        }, this.options);
        if (toolbarElem) {
            this.options.modules['toolbar'] = toolbarElem;
        }
        this.quillEditor = new Quill(this.editorElem, this.options);
        if (this.content) {
            this.quillEditor.pasteHTML(this.content);
        }
        this.ready.emit(this.quillEditor);
        this.quillEditor.on('selection-change', function (range) {
            if (!range) {
                _this.onModelTouched();
                _this.blur.emit(_this.quillEditor);
            }
            else {
                _this.focus.emit(_this.quillEditor);
            }
        });
        this.quillEditor.on('text-change', function (delta, oldDelta, source) {
            /** @type {?} */
            var html = _this.editorElem.children[0].innerHTML;
            /** @type {?} */
            var text = _this.quillEditor.getText();
            if (html === '<p><br></p>') {
                html = null;
            }
            _this.onModelChange(html);
            _this.change.emit({
                editor: _this.quillEditor,
                html: html,
                text: text
            });
        });
        this.quillEditor.enable(false);
        setTimeout(function () {
            _this.quillEditor.enable(true);
        }, 0);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    NgxQuillComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes['readOnly'] && this.quillEditor) {
            this.quillEditor.enable(!changes['readOnly'].currentValue);
        }
        if (changes['content'] && this.quillEditor) {
            this.quillEditor.pasteHTML(this.content);
        }
    };
    /**
     * @param {?} currentValue
     * @return {?}
     */
    NgxQuillComponent.prototype.writeValue = /**
     * @param {?} currentValue
     * @return {?}
     */
    function (currentValue) {
        this.content = currentValue;
        if (this.quillEditor) {
            if (currentValue) {
                this.quillEditor.pasteHTML(currentValue);
                return;
            }
            this.quillEditor.setText('');
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NgxQuillComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    NgxQuillComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    NgxQuillComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-quill',
                    template: "<ng-content select=\"[ngx-quill-toolbar]\"></ng-content>",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return NgxQuillComponent; }),
                            multi: true
                        }],
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    NgxQuillComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    NgxQuillComponent.propDecorators = {
        options: [{ type: Input }],
        content: [{ type: Input }],
        blur: [{ type: Output }],
        focus: [{ type: Output }],
        ready: [{ type: Output }],
        change: [{ type: Output }]
    };
    return NgxQuillComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NgxQuillModule = /** @class */ (function () {
    function NgxQuillModule() {
    }
    NgxQuillModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [NgxQuillComponent],
                    exports: [NgxQuillComponent]
                },] }
    ];
    return NgxQuillModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { NgxQuillComponent, NgxQuillModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,